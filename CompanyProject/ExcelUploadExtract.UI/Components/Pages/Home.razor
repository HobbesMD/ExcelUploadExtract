@page "/"
@using CsvHelper
@using ExcelUploadExtract
@using ExcelUploadExtract.UI.Models
@using ExcelUploadExtract.UI.Data
@using OfficeOpenXml
@using System.Globalization
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject IWebHostEnvironment Environment
@implements IDisposable
@inject IDbContextFactory<SalesLeadContext> DbFactory
@inject IConfiguration Configuration

<MudPopoverProvider />

<PageTitle>File Upload</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudContainer class="d-flex justify-space-between">
        <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                       Accept="@string.Join(",", AcceptedFileTypes)"
                       FilesChanged="UploadFiles"
                       MaximumFileCount="100"
                       Disabled=@(_loadingFile || _sendingToCRM)>
            <ActivatorContent>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload">
                    Upload Excel File
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SendLeadsToCRM" Disabled="@(!SalesLeads.Any() || _loadingFile || _sendingToCRM)">
            <MudIcon Icon="@Icons.Material.Filled.Save" />
            <MudText>Save new rows to CRM</MudText>
        </MudButton>
    </MudContainer>

    <MudContainer>
        @if (FailedMessages?.Any() ?? false)
        {
            foreach (var file in FailedMessages)
            {
                <MudAlert Severity="Severity.Error" Class="mt-2">@file</MudAlert>
            }
        }

        @if (WarningMessages?.Any() ?? false)
        {
            foreach (var file in WarningMessages)
            {
                <MudAlert Severity="Severity.Warning" Class="mt-2">@file</MudAlert>
            }
        }

        <MudDataGrid Items="SalesLeads.Values" Class="my-4">
            <Columns>
                <PropertyColumn Property="x => x.QuoteSentDate" Title="Quote Sent Date" Format="d" />
                <PropertyColumn Property="x => x.SalesPerson" Title="Sales Person" />
                <PropertyColumn Property="x => x.ProjectName" Title="Project Name" />
                <PropertyColumn Property="x => x.QuoteAmount" Title="QuoteAmount" Format="C" />
            </Columns>
        </MudDataGrid>

        @if (_showDataSaveMessage)
        {
            if (_dataSaveSuccessful)
            {
                <MudAlert Severity="Severity.Success">Data saved successfully</MudAlert>
            }
            else
            {
                <MudAlert Severity="Severity.Error">Data failed to save</MudAlert>
            }
        }
    </MudContainer>
</MudContainer>


@code
{
    private SalesLeadContext? _context { get; set; }

    private bool _sendingToCRM = false;
    private bool _loadingFile = false;
    private bool _showDataSaveMessage = false;
    private bool _dataSaveSuccessful = false;

    public string[] AcceptedFileTypes = new string[0];
    public int MaxFileSizeKB;
    public List<string> FailedMessages = new List<string>();
    public List<string> WarningMessages = new List<string>();
    public Dictionary<string, SalesLead> SalesLeads = new Dictionary<string, SalesLead>();

    private async void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        FailedMessages.Clear();
        WarningMessages.Clear();
        _loadingFile = true;
        _dataSaveSuccessful = false;
        _showDataSaveMessage = false;
        this.StateHasChanged();

        foreach (var file in files)
        {
            try
            {
                if (!await UploadFile(file))
                    WarningMessages.Add($"{file.Name} contained no new leads");
            }
            catch (Exception e)
            {
                // Real world probably want to prettify and not show all error messages but in this case it'll do
                FailedMessages.Add($"{file.Name}: {e.Message}");
            }

        }

        _loadingFile = false;
        this.StateHasChanged();
    }

    private async Task<bool> UploadFile(IBrowserFile file)
    {
        string path = "";

        ValidateUpload(file);

        try
        {
            // Use random file name as user-given file name is potentially unsafe
            path = Path.Combine(Environment.ContentRootPath, "Uploads", Path.GetRandomFileName());

            // Download file
            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(fs);
            fs.Close();

            var fileUpload = new FileUpload(path, file.ContentType);
            var salesLeads = fileUpload.GetSalesLeads();
            var newLeads = salesLeads
                .Where(lead => !_context.SalesLeads.Any(l => l.QuoteSentDate == lead.QuoteSentDate
                    && l.SalesPerson == lead.SalesPerson
                    && l.ProjectName == lead.ProjectName));

            foreach (var lead in newLeads)
            {
                SalesLeads.TryAdd(string.Concat(lead.QuoteSentDate, lead.SalesPerson, lead.ProjectName), lead);
            }

            return newLeads.Any();
        }
        finally
        {
            if (!string.IsNullOrEmpty(path) && File.Exists(path))
                File.Delete(path);
        }
    }

    /// <summary>
    /// Throws exception if file is not a valid file for upload.
    /// </summary>
    private void ValidateUpload(IBrowserFile file)
    {
        var fileType = Path.GetExtension(file.Name);
        if (!AcceptedFileTypes.Contains(fileType))
            throw new ArgumentException($"Invalid file type: {fileType}");

        if (file.Size > MaxFileSizeKB * 1024)
            throw new ArgumentException($"Exceeds maximum size of {MaxFileSizeKB} KB");
    }

    private async void SendLeadsToCRM()
    {
        _sendingToCRM = true;
        _dataSaveSuccessful = false;
        this.StateHasChanged();

        try
        {
            await _context.AddRangeAsync(SalesLeads.Select(l => l.Value));
            await _context.SaveChangesAsync();
            _dataSaveSuccessful = true;
            SalesLeads.Clear();
        }
        catch (Exception e)
        {

        }

        _showDataSaveMessage = true;
        _sendingToCRM = false;
        this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _context = DbFactory.CreateDbContext();

        AcceptedFileTypes = Configuration.GetSection("AcceptedFileTypes").GetChildren().Select(x => x.Value).ToArray();
        MaxFileSizeKB = int.Parse(Configuration.GetSection("MaxFileSizeKB").Value ?? "0");
    }

    public void Dispose() => _context?.Dispose();
}